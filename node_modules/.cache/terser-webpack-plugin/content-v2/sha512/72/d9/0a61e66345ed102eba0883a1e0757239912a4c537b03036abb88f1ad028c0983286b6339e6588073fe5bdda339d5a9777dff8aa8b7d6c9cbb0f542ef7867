{"map":"{\"version\":3,\"sources\":[\"/Users/jr1307/my-git/live/src/live_cryptocurrency.js\",\"/Users/jr1307/my-git/live/src/App.js\",\"/Users/jr1307/my-git/live/src/serviceWorker.js\",\"/Users/jr1307/my-git/live/src/index.js\"],\"names\":[\"Live\",\"handleRefresh\",\"window\",\"location\",\"reload\",\"react_default\",\"a\",\"createElement\",\"className\",\"this\",\"props\",\"pageTitle\",\"onClick\",\"Component\",\"defaultProps\",\"App\",\"live_cryptocurrency\",\"Boolean\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"oMAIMA,mNAQLC,cAAgB,WACfC,OAAOC,SAASC,kFAGhB,OACCC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,SAAA,KACCF,EAAAC,EAAAC,cAAA,KAAA,KAAKE,KAAKC,MAAMC,WAChBN,EAAAC,EAAAC,cAAA,IAAA,CAAGC,UAAU,aAAb,MACAH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,aAAaI,QAASH,KAAKR,eAC5CI,EAAAC,EAAAC,cAAA,OAAA,CAAMC,UAAU,SAAhB,qBAlBaK,EAAAA,YAAbb,EAEKc,aAAe,CAClBH,UAAY,uBAuBLX,IAAAA,EAAAA,EClBAe,mLANb,OACCV,EAAAC,EAAAC,cAACS,EAAD,aAHeH,EAAAA,WCQEI,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport PropTypes from \\\"prop-types\\\";\\nimport './App.css';\\n\\nclass Live extends Component {\\n\\t\\n    static defaultProps = {\\n        pageTitle : \\\"Live Cryptocurrency\\\"\\n    }\\n    static propTypes = {\\n        pageTitle : PropTypes.string.isRequired\\n\\t}\\n\\thandleRefresh = () => {\\n\\t\\twindow.location.reload(); \\n\\t}\\n\\trender() {\\n\\t\\treturn (\\n\\t\\t\\t<div className=\\\"bx\\\">\\n\\t\\t\\t\\t<header>\\n\\t\\t\\t\\t\\t<h1>{this.props.pageTitle}</h1>\\n\\t\\t\\t\\t\\t<p className=\\\"countdown\\\">60</p>\\n\\t\\t\\t\\t\\t<button className=\\\"btn_reload\\\" onClick={this.handleRefresh}>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"blind\\\">Refresh</span>\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</header>\\n\\t\\t\\t</div>\\n\\t\\t);\\n\\t}\\n}\\n\\nexport default Live;\\n\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Live from './live_cryptocurrency';\\n\\nclass App extends Component {\\n\\trender() {\\n\\t\\treturn (\\n\\t\\t\\t<Live />\\n\\t\\t);\\n\\t}\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,n,t){},16:function(e,n,t){\"use strict\";t.r(n);var a=t(0),r=t.n(a),o=t(8),c=t.n(o),l=(t(15),t(1)),i=t(2),s=t(4),u=t(3),h=t(5),d=(t(7),function(e){function n(){var e,t;Object(l.a)(this,n);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(t=Object(s.a)(this,(e=Object(u.a)(n)).call.apply(e,[this].concat(r)))).handleRefresh=function(){window.location.reload()},t}return Object(h.a)(n,e),Object(i.a)(n,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"bx\"},r.a.createElement(\"header\",null,r.a.createElement(\"h1\",null,this.props.pageTitle),r.a.createElement(\"p\",{className:\"countdown\"},\"60\"),r.a.createElement(\"button\",{className:\"btn_reload\",onClick:this.handleRefresh},r.a.createElement(\"span\",{className:\"blind\"},\"Refresh\"))))}}]),n}(a.Component));d.defaultProps={pageTitle:\"Live Cryptocurrency\"};var m=d,p=function(e){function n(){return Object(l.a)(this,n),Object(s.a)(this,Object(u.a)(n).apply(this,arguments))}return Object(h.a)(n,e),Object(i.a)(n,[{key:\"render\",value:function(){return r.a.createElement(m,null)}}]),n}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},7:function(e,n,t){},9:function(e,n,t){e.exports=t(16)}},[[9,1,2]]]);","extractedComments":[]}